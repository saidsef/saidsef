name: terraform

on:
  workflow_call:
    inputs:
      start-version:
        required: false
        type: string
      end-version:
        required: false
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      versions: ${{ steps.set-matrix.outputs.versions }}
    steps:
    - uses: actions/checkout@v5
    - uses: actions/setup-python@v6
      with:
        python-version: 3.11
    - uses: terraform-linters/setup-tflint@v6
    - name: Terraform Lint
      run: |
        tflint --version
        tflint --init
        tflint
    - name: set matrix
      id: set-matrix
      shell: bash
      run: |
        # For this to work it needs to be composite action
        # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
        # chmod +x ./scripts/generate-versions.sh
        # echo "::set-output name=versions::$(./scripts/generate-versions.sh)"

        set -ex  # Exit immediately if a command exits with a non-zero status

        # Define start and end versions
        START_VERSION=${{ inputs.start-version || '3' }} # minimum version
        END_VERSION=${{ inputs.end-version || '13' }} # maximum version (up to 1.13.x)

        # Check if jq is installed
        if ! command -v jq &> /dev/null; then
          echo "jq could not be found"
          exit 1
        fi

        # Generate Terraform versions from 1.3 to 1.13
        versions=()
        for i in $(seq $START_VERSION $END_VERSION); do
          versions+=("1.$i")
        done

        # Add the latest version
        versions+=("latest")

        # Print the versions as a JSON array
        version=$(printf '%s\n' "${versions[@]}" | jq -R -s -c 'split("\n")[:-1]')

        echo "versions=$version" >> $GITHUB_OUTPUT

  validate:
    name: Validate
    needs: [terraform]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      pull-requests: write
    strategy:
      fail-fast: true
      matrix:
        tf-version: ${{ fromJson(needs.terraform.outputs.versions) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf-version }}
    - name: Terraform Init
      run: |
        terraform init -backend=false -upgrade -reconfigure
    - name: Terraform FMT
      run: |
        terraform fmt -check -recursive
    - name: Terraform Validate
      run: |
        terraform validate
    - name: Terraform Version / Providers
      run: |
        terraform version
        terraform providers
    - name: Examples Complete Validate
      run: |
        cd examples/complete
        terraform init -backend=false -upgrade -reconfigure
        terraform validate
    - name: Example Remote Validate
      run: |
        cd examples/remote
        terraform init -backend=false -upgrade -reconfigure
        terraform validate
